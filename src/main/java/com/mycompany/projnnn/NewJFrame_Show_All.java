/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.projnnn;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author alool
 */
public class NewJFrame_Show_All extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame_Show_All
     */
    public NewJFrame_Show_All() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTablePatients = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableDoctors = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton21 = new javax.swing.JButton();
        jTextField7 = new javax.swing.JTextField();
        jButton26 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableNurses = new javax.swing.JTable();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jButton22 = new javax.swing.JButton();
        jTextField8 = new javax.swing.JTextField();
        jButton27 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jButton23 = new javax.swing.JButton();
        jTextField9 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton28 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable7 = new javax.swing.JTable();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableAppointments = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jTextField10 = new javax.swing.JTextField();
        jButton24 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jButton25 = new javax.swing.JButton();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTable33 = new javax.swing.JTable();
        jScrollPane14 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jTextField11 = new javax.swing.JTextField();
        jButton30 = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jTextField6 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton20 = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTable88 = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        jTable9 = new javax.swing.JTable();
        jTextField12 = new javax.swing.JTextField();
        jButton31 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setBackground(new java.awt.Color(153, 255, 255));
        jButton1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "D_ID", "F_N", "L_N", "Specialist", "Mobile", "Email", "Password", "Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton3.setBackground(new java.awt.Color(153, 255, 255));
        jButton3.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 0, 0));
        jButton3.setText("Delete");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(153, 255, 255));
        jButton4.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 0, 0));
        jButton4.setText("Update");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField1.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jTableDoctors.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        jTableDoctors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "D_ID", "F_N", "L_N", "Specialist", "Mobile", "Email", "Password", "Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTableDoctors);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Doctors_Page");

        jButton21.setBackground(new java.awt.Color(153, 255, 255));
        jButton21.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        jButton21.setForeground(new java.awt.Color(0, 0, 0));
        jButton21.setText("Show");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        jTextField7.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jTextField7.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton26.setBackground(new java.awt.Color(255, 153, 255));
        jButton26.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton26.setForeground(new java.awt.Color(0, 0, 0));
        jButton26.setText("Clean");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton21, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                                    .addComponent(jTextField1)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton26, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(172, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 1102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addComponent(jButton21)
                .addGap(32, 32, 32)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(165, 165, 165)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton26, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(231, Short.MAX_VALUE)))
        );

        jTablePatients.addTab("1", jPanel1);

        jButton2.setBackground(new java.awt.Color(153, 255, 255));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 0, 0));
        jButton2.setText("Delete");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(153, 255, 255));
        jButton5.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton5.setForeground(new java.awt.Color(0, 0, 0));
        jButton5.setText("Update");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(153, 255, 255));
        jButton6.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton6.setForeground(new java.awt.Color(0, 0, 0));
        jButton6.setText("Search");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jTableNurses.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        jTableNurses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "N_ID", "Name", "NurseDutyHour", "Email", "Mobile", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableNurses);

        jTextField2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jTextField2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTable5.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "N_ID", "Name", "NurseDutyHour", "Email", "Mobile", "Password"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(jTable5);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Nurses_Page");

        jButton22.setBackground(new java.awt.Color(153, 255, 255));
        jButton22.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        jButton22.setForeground(new java.awt.Color(0, 0, 0));
        jButton22.setText("Show");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jTextField8.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jTextField8.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton27.setBackground(new java.awt.Color(255, 153, 255));
        jButton27.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton27.setForeground(new java.awt.Color(0, 0, 0));
        jButton27.setText("Clean");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(30, 30, 30))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(32, 32, 32)
                                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton22, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(13, 13, 13)))
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1090, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 1090, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1109, 1109, 1109))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jButton22, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5))
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton27, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );

        jTablePatients.addTab("2", jPanel2);

        jButton7.setBackground(new java.awt.Color(153, 255, 255));
        jButton7.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton7.setForeground(new java.awt.Color(0, 0, 0));
        jButton7.setText("Delete");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(153, 255, 255));
        jButton8.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton8.setForeground(new java.awt.Color(0, 0, 0));
        jButton8.setText("Update");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(153, 255, 255));
        jButton9.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton9.setForeground(new java.awt.Color(0, 0, 0));
        jButton9.setText("Search");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jTable2.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "P_ID", "F_N", "L_N", "D_Of_B", "Gender", "Address", "Phone", "Email", "History_ID", "Blood_Group"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jTable6.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "P_ID", "F_N", "L_N", "D_Of_B", "Gender", "Address", "Phone", "Email", "History_ID", "Blood_Group"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTable6);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("Patients_Page");

        jButton23.setBackground(new java.awt.Color(153, 255, 255));
        jButton23.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        jButton23.setForeground(new java.awt.Color(0, 0, 0));
        jButton23.setText("Show");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jTextField9.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jTextField9.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTextField3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jTextField3.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton28.setBackground(new java.awt.Color(255, 153, 255));
        jButton28.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton28.setForeground(new java.awt.Color(0, 0, 0));
        jButton28.setText("Clean");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1089, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton28, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField3))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 1089, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton23, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton8)))
                .addGap(18, 18, 18)
                .addComponent(jButton28, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jTablePatients.addTab("3", jPanel3);

        jButton10.setBackground(new java.awt.Color(153, 255, 255));
        jButton10.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton10.setForeground(new java.awt.Color(0, 0, 0));
        jButton10.setText("Delete");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setBackground(new java.awt.Color(153, 255, 255));
        jButton11.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton11.setForeground(new java.awt.Color(0, 0, 0));
        jButton11.setText("Search");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jTextField4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jTextField4.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jTable7.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        jTable7.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "A_ID", "date", "Time", "Description", "D_ID", "P_ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(jTable7);

        jTableAppointments.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        jTableAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "A_ID", "date", "Time", "Description", "D_ID", "P_ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAppointments.setToolTipText("");
        jScrollPane8.setViewportView(jTableAppointments);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Appointments_Page");

        jTextField10.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jTextField10.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton24.setBackground(new java.awt.Color(153, 255, 255));
        jButton24.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        jButton24.setForeground(new java.awt.Color(0, 0, 0));
        jButton24.setText("Show");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        jButton12.setBackground(new java.awt.Color(153, 255, 255));
        jButton12.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton12.setForeground(new java.awt.Color(0, 0, 0));
        jButton12.setText("Update");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton29.setBackground(new java.awt.Color(255, 153, 255));
        jButton29.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton29.setForeground(new java.awt.Color(0, 0, 0));
        jButton29.setText("Clean");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton29, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                            .addComponent(jButton11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(36, 36, 36)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 1077, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jButton24, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 1066, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton24, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(jButton10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(jButton12))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jButton29, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );

        jTablePatients.addTab("4", jPanel4);

        jButton13.setBackground(new java.awt.Color(153, 255, 255));
        jButton13.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton13.setForeground(new java.awt.Color(0, 0, 0));
        jButton13.setText("Delete");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton14.setBackground(new java.awt.Color(153, 255, 255));
        jButton14.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton14.setForeground(new java.awt.Color(0, 0, 0));
        jButton14.setText("Update");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setBackground(new java.awt.Color(153, 255, 255));
        jButton15.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton15.setForeground(new java.awt.Color(0, 0, 0));
        jButton15.setText("Search");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        jTextField5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jTextField5.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Medications_Page");

        jButton25.setBackground(new java.awt.Color(153, 255, 255));
        jButton25.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        jButton25.setForeground(new java.awt.Color(0, 0, 0));
        jButton25.setText("Show");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        jTable33.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        jTable33.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "m_id", "name", "dosage", "expirydate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane13.setViewportView(jTable33);

        jTable4.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "m_id", "name", "dosage", "expirydate"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane14.setViewportView(jTable4);

        jTextField11.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jTextField11.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField11ActionPerformed(evt);
            }
        });

        jButton30.setBackground(new java.awt.Color(255, 153, 255));
        jButton30.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton30.setForeground(new java.awt.Color(0, 0, 0));
        jButton30.setText("Clean");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jButton13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(21, 21, 21))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton25, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel5Layout.createSequentialGroup()
                                        .addGap(30, 30, 30)
                                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 1090, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton30, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                    .addComponent(jButton14, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21)
                .addComponent(jScrollPane13))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane14, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jButton25, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(jButton13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(63, 63, 63)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton14)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton30, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        jTablePatients.addTab("5", jPanel5);

        jButton16.setBackground(new java.awt.Color(153, 255, 255));
        jButton16.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jButton16.setForeground(new java.awt.Color(0, 0, 0));
        jButton16.setText("Delete");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setBackground(new java.awt.Color(153, 255, 255));
        jButton17.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton17.setForeground(new java.awt.Color(0, 0, 0));
        jButton17.setText("Update");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jButton18.setBackground(new java.awt.Color(153, 255, 255));
        jButton18.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton18.setForeground(new java.awt.Color(0, 0, 0));
        jButton18.setText("Search");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jTextField6.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jTextField6.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("Invoices_Page");

        jButton20.setBackground(new java.awt.Color(153, 255, 255));
        jButton20.setFont(new java.awt.Font("Segoe UI", 3, 36)); // NOI18N
        jButton20.setForeground(new java.awt.Color(0, 0, 0));
        jButton20.setText("Show");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        jTable88.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        jTable88.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "i_id", "amount", "payment_status", "p_id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane9.setViewportView(jTable88);

        jTable9.setFont(new java.awt.Font("Segoe UI", 3, 16)); // NOI18N
        jTable9.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "i_id", "amount", "payment_status", "p_id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane10.setViewportView(jTable9);

        jTextField12.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jTextField12.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton31.setBackground(new java.awt.Color(255, 153, 255));
        jButton31.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jButton31.setForeground(new java.awt.Color(0, 0, 0));
        jButton31.setText("Clean");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                        .addComponent(jButton20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton18, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 1092, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(158, 158, 158)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 1084, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(38, Short.MAX_VALUE)))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton20, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 164, Short.MAX_VALUE)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jButton31)
                .addGap(30, 30, 30))
            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel6Layout.createSequentialGroup()
                    .addGap(10, 10, 10)
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(234, Short.MAX_VALUE)))
        );

        jTablePatients.addTab("6", jPanel6);

        getContentPane().add(jTablePatients, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 9, 1250, 580));
        jTablePatients.getAccessibleContext().setAccessibleDescription("");

        jButton19.setBackground(new java.awt.Color(255, 153, 153));
        jButton19.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        jButton19.setForeground(new java.awt.Color(0, 0, 0));
        jButton19.setText("← Back");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton19, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 600, 94, 30));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
  //-------{ Update Doctor }--------------------------------------------  
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    
        
     int selectedRow = jTable1.getSelectedRow();
     if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a row to update.");
        return;
    }

    Connection con = null;
    PreparedStatement pstmt = null;

    try {
        DriverManager.registerDriver(new org.postgresql.Driver());
        String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        con = DriverManager.getConnection(conninfo, "allii", "12345");
        con.setAutoCommit(false);

        int id = Integer.parseInt(jTable1.getValueAt(selectedRow, 0).toString());
        String fname = jTable1.getValueAt(selectedRow, 1).toString();
        String lname = jTable1.getValueAt(selectedRow, 2).toString();
        String sp = jTable1.getValueAt(selectedRow, 3).toString();
        String mobile = jTable1.getValueAt(selectedRow, 4).toString();
        String email = jTable1.getValueAt(selectedRow, 5).toString();
        String pas = jTable1.getValueAt(selectedRow, 6).toString();
        String address = jTable1.getValueAt(selectedRow, 7).toString();

        String sql = "UPDATE hwa.doctors SET first_name = ?, last_name = ?, specialist = ?, mobile = ?, email = ?, password = ?, address = ? WHERE d_id = ?";
        pstmt = con.prepareStatement(sql);
        
        pstmt.setString(1, fname);
        pstmt.setString(2, lname);
        pstmt.setString(3, sp);
        pstmt.setString(4, mobile);
        pstmt.setString(5, email);
        pstmt.setString(6, pas);
        pstmt.setString(7, address);
        pstmt.setInt(8, id);

        pstmt.executeUpdate();

        con.commit();
        JOptionPane.showMessageDialog(null, "Update successful");
    } catch (Exception ex) {
        if (con != null) {
            try {
                con.rollback();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Rollback failed: " + e.getMessage());
            }
        }
        JOptionPane.showMessageDialog(null, "Update failed: " + ex.toString());
        ex.printStackTrace();
    } finally {
        try {
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Resource cleanup failed: " + ex.getMessage());
            ex.printStackTrace();
        }
    }
    
    }//GEN-LAST:event_jButton4ActionPerformed

    
    
    
    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        NewJFrame1 B00 = new NewJFrame1();  
         B00.setVisible(true);  
         this.dispose();  
    }//GEN-LAST:event_jButton19ActionPerformed
//---------------------
    
    
// { Delete Doctor }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    
        try {
           
                DriverManager.registerDriver(new org.postgresql.Driver());
                String conninfo = "jdbc:postgresql://localhost:5432/postgres";
                Connection con = DriverManager.getConnection(conninfo,"allii","12345");
                con.setAutoCommit(false);
           
            
           
                Statement stmt = con.createStatement(); 
                String Check_id_is_exsit = jTextField7.getText();  
                
                String exist = "SELECT * FROM hwa.doctors where  d_id='"+Check_id_is_exsit+"'";
                ResultSet rs = stmt.executeQuery(exist);
               
                if(rs.next()){
                    
                String sql = "delete from hwa.doctors where d_id="+this.jTextField7.getText()+"";
                String sqa = "delete from hwa.appointments where d_id="+this.jTextField7.getText()+"";
                
                Statement sa = con.createStatement();
                sa.executeUpdate(sqa);
                Statement st = con.createStatement();
                st.executeUpdate(sql);
                 
                jTextField7.setText(null);
                JOptionPane.showMessageDialog(null,"Deleted Successfully!"); 
                }
                 else{
                JOptionPane.showMessageDialog(null, "ID is Not Exist!");         
                jTextField7.setText(null);
              }
                
                con.commit();
                con.close();
                       
            
        } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.toString());
        }   
        
    }//GEN-LAST:event_jButton3ActionPerformed

//---------------------
    
// { Delete Nurses }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         
       try {
           
                DriverManager.registerDriver(new org.postgresql.Driver());
                String conninfo = "jdbc:postgresql://localhost:5432/postgres";
                Connection con=DriverManager.getConnection(conninfo,"allii","12345");
                con.setAutoCommit(false);
           

                Statement stmt = con.createStatement(); 
                String Check_id_is_exsit = jTextField8.getText();  
                
                String exist = "SELECT * FROM hwa.nurses where n_id='"+Check_id_is_exsit+"'";
                ResultSet rs = stmt.executeQuery(exist);
               
                if(rs.next()){
                    
                String sql = "delete from hwa.nurses where n_id="+this.jTextField8.getText()+"";
                String sq =  "delete from hwa.patientnurseassignments where n_id="+this.jTextField8.getText()+"";
                Statement st = con.createStatement();
                st.executeUpdate(sq);
                Statement s = con.createStatement();
                s.executeUpdate(sql);
                 
                 jTextField8.setText(null);
                 JOptionPane.showMessageDialog(null,"Deleted Successfully!"); 
                }
                 else{
                JOptionPane.showMessageDialog(null, "ID is Not Exist!");         
                jTextField8.setText(null);
              }
          
            con.commit();
            con.close();
            
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
           
    }//GEN-LAST:event_jButton2ActionPerformed
//_______________
    
    
//-------{ Update Nurses }--------------------------------------------  
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
                                             
    int selectedRow = jTable5.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a row to update.");
        return;
    }

    Connection con = null;
    PreparedStatement pstmt = null;

    try {
        DriverManager.registerDriver(new org.postgresql.Driver());
        String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        con = DriverManager.getConnection(conninfo, "allii", "12345");
        con.setAutoCommit(false);


        int nurseId = (Integer) jTable5.getValueAt(selectedRow, 0);
        String name = (String) jTable5.getValueAt(selectedRow, 1);
        String dutyHour = (String) jTable5.getValueAt(selectedRow, 2); 
        String email = (String) jTable5.getValueAt(selectedRow, 3);
        String mobile = (String) jTable5.getValueAt(selectedRow, 4);
        String password = (String) jTable5.getValueAt(selectedRow, 5);

        String sql = "UPDATE hwa.nurses SET name = ?, nursedutyhour = ?, email = ?, mobile = ?, password = ? WHERE n_id = ?";
        pstmt = con.prepareStatement(sql);
        
        pstmt.setString(1, name);
        pstmt.setString(2, dutyHour);
        pstmt.setString(3, email);
        pstmt.setString(4, mobile);
        pstmt.setString(5, password);
        pstmt.setInt(6, nurseId);

        int affectedRows = pstmt.executeUpdate();
        con.commit();

        if (affectedRows > 0) {
            JOptionPane.showMessageDialog(null, "Update successful");
        } else {
            JOptionPane.showMessageDialog(null, "Update failed: No rows affected.");
        }
        
    } catch (Exception ex) {
       JOptionPane.showMessageDialog(null, "Update failed: "+ ex.toString()); 
    } 
     
    }//GEN-LAST:event_jButton5ActionPerformed

    
    
    
// { Delete Patients }    
    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
     
        try {
           
                DriverManager.registerDriver(new org.postgresql.Driver());
                String conninfo = "jdbc:postgresql://localhost:5432/postgres";
                Connection con = DriverManager.getConnection(conninfo,"allii","12345");
                con.setAutoCommit(false);
           
            
            
                Statement stmt = con.createStatement(); 
                String Check_id_is_exsit = jTextField9.getText();  
                
                String exist = "SELECT * FROM hwa.patients  where p_id='"+Check_id_is_exsit+"'";
                ResultSet rs = stmt.executeQuery(exist);
               
                if(rs.next()){
                    
                String sql="delete from hwa.patients where p_id="+this.jTextField9.getText()+"";
                String sqa="delete from hwa.appointments where p_id="+this.jTextField9.getText()+"";
                String sqi="delete from hwa.invoices where p_id="+this.jTextField9.getText()+"";
                String sqp="delete from hwa.prescpatientnurseassignmentsriptions where p_id="+this.jTextField9.getText()+"";
                String sqn="delete from hwa.patientnurseassignments where p_id="+this.jTextField9.getText()+""; 
                 
                Statement s = con.createStatement();
                s.executeUpdate(sqa);
                Statement sta = con.createStatement();
                sta.executeUpdate(sqi);
                Statement stp = con.createStatement();
                stp.executeUpdate(sqp);
                Statement sn = con.createStatement();
                sn.executeUpdate(sqn);
                Statement st = con.createStatement();
                st.executeUpdate(sql);
      
            
                 jTextField9.setText(null);
                 JOptionPane.showMessageDialog(null,"Deleted Successfully!"); 
                }
                 else{
                JOptionPane.showMessageDialog(null, "ID is Not Exist!");         
                jTextField9.setText(null);
              }
           
          
                con.commit();
                con.close();
               
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }

        
    }//GEN-LAST:event_jButton7ActionPerformed

    
    
    
    
   
    
    
    
//-------{ Update Patients }--------------------------------------------     
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
         
    int selectedRow = jTable6.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a row to update.");
        return;
    }

    Connection con = null;
    PreparedStatement pstmt = null;

    try {
        DriverManager.registerDriver(new org.postgresql.Driver());
        String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        con = DriverManager.getConnection(conninfo, "allii", "12345");
        con.setAutoCommit(false);


        int patientId = (Integer) jTable6.getValueAt(selectedRow, 0);
        String firstName = (String) jTable6.getValueAt(selectedRow, 1);
        String lastName = (String) jTable6.getValueAt(selectedRow, 2);
        
 //__________________
 
         Object dateObject = jTable6.getValueAt(selectedRow, 3);
        java.sql.Date dateOfBirthSql;
        if (dateObject instanceof java.util.Date) {
            dateOfBirthSql = new java.sql.Date(((java.util.Date) dateObject).getTime());
        } else {
            // If it's a string, we parse it as before
            String expiryDateString = (String) dateObject;
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd"); // Format to match your system's date format
            java.util.Date expiryDateUtil = df.parse(expiryDateString);
            dateOfBirthSql = new java.sql.Date(expiryDateUtil.getTime());
        }
//__________________
    
        String gender = (String) jTable6.getValueAt(selectedRow, 4);
        String address = (String) jTable6.getValueAt(selectedRow, 5);
        String phone = (String) jTable6.getValueAt(selectedRow, 6);
        String email = (String) jTable6.getValueAt(selectedRow, 7);
        int historyId = (Integer) jTable6.getValueAt(selectedRow, 8);
        String bloodGroup = (String) jTable6.getValueAt(selectedRow, 9);
          
        
        
        String sql = "UPDATE hwa.patients SET first_name = ?, last_name = ?, dateofbirth = ?, gender = ?, address = ?, phone = ?, email = ?, history_id = ?, blood_group = ? WHERE p_id = ?";
        pstmt = con.prepareStatement(sql);
        

        pstmt.setString(1, firstName);
        pstmt.setString(2, lastName);
        pstmt.setDate(3, dateOfBirthSql);
        pstmt.setString(4, gender);
        pstmt.setString(5, address);
        pstmt.setString(6, phone);
        pstmt.setString(7, email);
        pstmt.setInt(8, historyId);
        pstmt.setString(9, bloodGroup);
        pstmt.setInt(10, patientId);


        int affectedRows = pstmt.executeUpdate();
        con.commit();

        if (affectedRows > 0) {
            JOptionPane.showMessageDialog(null, "Update successful");
        } else {
            JOptionPane.showMessageDialog(null, "Update failed: No rows affected.");
        }
        
    } catch (Exception ex) {
          JOptionPane.showMessageDialog(null, "Update failed: "+ ex.toString());
    }  
        
    }//GEN-LAST:event_jButton8ActionPerformed

    
    
   // { Delete App. }    
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        
        
 try {
           
            DriverManager.registerDriver(new org.postgresql.Driver());
            String conninfo="jdbc:postgresql://localhost:5432/postgres";
            Connection con=DriverManager.getConnection(conninfo,"allii","12345");
            con.setAutoCommit(false);
           
            
            
                Statement stmt = con.createStatement(); 
                String Check_id_is_exsit = jTextField10.getText();  
                
                String exist = "SELECT * FROM hwa.appointments  where  a_id='"+Check_id_is_exsit+"'";
                ResultSet rs = stmt.executeQuery(exist);
               
                if(rs.next()){
                    
                String sql="delete from hwa.appointments where a_id="+this.jTextField10.getText()+"";
                Statement st=con.createStatement();
                st.executeUpdate(sql);
                 
                 jTextField10.setText(null);
                 JOptionPane.showMessageDialog(null,"Deleted Successfully!"); 
                }
                 else{
                JOptionPane.showMessageDialog(null, "ID is Not Exist!");         
                jTextField10.setText(null);
              }
            
                   
                con.commit();
                con.close();
               
        } catch (Exception ex) {
             JOptionPane.showMessageDialog(null, ex.toString());
        }
        
    }//GEN-LAST:event_jButton10ActionPerformed

  
 //-------{ Update Appointments }--------------------------------------------     
   
    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        
    int selectedRow = jTable7.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a row to update.");
        return;
    }

    Connection con = null;
    PreparedStatement pstmt = null;

    try {
        DriverManager.registerDriver(new org.postgresql.Driver());
        String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        con = DriverManager.getConnection(conninfo, "allii", "12345");
        con.setAutoCommit(false);


        int appointmentId = (Integer) jTable7.getValueAt(selectedRow, 0);
              
  
            
        // Check if the value is already a java.util.Date
        
           Object dateObject = jTable7.getValueAt(selectedRow, 1);
           java.sql.Date datex;
           if (dateObject instanceof java.util.Date) {
            datex = new java.sql.Date(((java.util.Date) dateObject).getTime());
          } else {
            // If it's a string, we parse it as before
            String expiryDateString = (String) dateObject;
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd"); // Format to match your system's date format
            java.util.Date expiryDateUtil = df.parse(expiryDateString);
            datex = new java.sql.Date(expiryDateUtil.getTime());
        }

 //___________  
  
         
       // Check the instance of the time object and cast accordingly
        Object timeObj = jTable7.getValueAt(selectedRow, 2);
        java.sql.Time time;
        if (timeObj instanceof java.sql.Time) {
            time = (java.sql.Time) timeObj;
        } else if (timeObj instanceof String) {
            time = java.sql.Time.valueOf((String) timeObj);
        } else {
            JOptionPane.showMessageDialog(null, "Invalid time format in table.");
            return;
        }
//__________________
        
        String description = (String) jTable7.getValueAt(selectedRow, 3);
        int doctorId = (Integer) jTable7.getValueAt(selectedRow, 4);
        int patientId = (Integer) jTable7.getValueAt(selectedRow, 5);


        String sql = "UPDATE hwa.appointments SET date = ?, time = ?, description = ?, d_id = ?, p_id = ? WHERE a_id = ?";
        pstmt = con.prepareStatement(sql);
        

        pstmt.setDate(1, datex);
        pstmt.setTime(2, time);
        pstmt.setString(3, description);
        pstmt.setInt(4, doctorId);
        pstmt.setInt(5, patientId);
        pstmt.setInt(6, appointmentId); //***


        int affectedRows = pstmt.executeUpdate();
        con.commit();

        if (affectedRows > 0) {
            JOptionPane.showMessageDialog(null, "Update successful");
        } else {
            JOptionPane.showMessageDialog(null, "Update failed: No rows affected.");
        }
        
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(null, "Update failed: " + ex.toString());
     }
        
    }//GEN-LAST:event_jButton12ActionPerformed

    
 // { Delete Med. }    
    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
          
        try {
           
             DriverManager.registerDriver(new org.postgresql.Driver());
             String conninfo="jdbc:postgresql://localhost:5432/postgres";
             Connection con=DriverManager.getConnection(conninfo,"allii","12345");
             con.setAutoCommit(false);
 
            
             Statement stmt = con.createStatement(); 
             String Check_id_is_exsit = jTextField11.getText();  
                
             String exist = "SELECT * FROM hwa.medications where  m_id='"+Check_id_is_exsit+"'";
             ResultSet rs = stmt.executeQuery(exist);
               
            if(rs.next()){
                    
             String sql="delete from hwa.medications where m_id="+this.jTextField11.getText()+"";
             String sq="delete from hwa.prescriptions where m_id="+this.jTextField11.getText()+"";
             Statement st = con.createStatement();
             Statement s = con.createStatement();
             s.executeUpdate(sq);
             st.executeUpdate(sql);
                 
             jTextField11.setText(null);
             JOptionPane.showMessageDialog(null,"Deleted Successfully!"); 
             }
                 else{
             JOptionPane.showMessageDialog(null, "ID is Not Exist!");         
             jTextField11.setText(null);
            }
  
            con.commit();
            con.close();
            
           } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.toString());
        }
        
    }//GEN-LAST:event_jButton13ActionPerformed

    
 //-------{ Update Med. }--------------------------------------------     
    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
   
        int selectedRow = jTable33.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a row to update.");
        return;
    }

    Connection con = null;
    PreparedStatement pstmt = null;

    try {
        DriverManager.registerDriver(new org.postgresql.Driver());
        String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        con = DriverManager.getConnection(conninfo, "allii", "12345");
        con.setAutoCommit(false);

        int medicationId = (Integer) jTable33.getValueAt(selectedRow, 0);
        String name = (String) jTable33.getValueAt(selectedRow, 1);
        String dosage = (String) jTable33.getValueAt(selectedRow, 2);
        
        
 //___________         
        
        // Check if the value is already a java.util.Date
        Object dateObject = jTable33.getValueAt(selectedRow, 3);
        java.sql.Date expiryDateSql;
        if (dateObject instanceof java.util.Date) {
            expiryDateSql = new java.sql.Date(((java.util.Date) dateObject).getTime());
        } else {
            // If it's a string, we parse it as before
            String expiryDateString = (String) dateObject;
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd"); // Format to match your system's date format
            java.util.Date expiryDateUtil = df.parse(expiryDateString);
            expiryDateSql = new java.sql.Date(expiryDateUtil.getTime());
        }

 //___________       
        
        String sql = "UPDATE hwa.medications SET name = ?, dosage = ?, expirydate = ? WHERE m_id = ?";
        pstmt = con.prepareStatement(sql);
        
        // Set parameters for the prepared statement
        pstmt.setString(1, name);
        pstmt.setString(2, dosage);
        pstmt.setDate(3, expiryDateSql); // This will be in the format yyyy-MM-dd for SQL
        pstmt.setInt(4, medicationId);

        int affectedRows = pstmt.executeUpdate();
        con.commit();

        if (affectedRows > 0) {
            JOptionPane.showMessageDialog(null, "Update successful");
        } else {
            JOptionPane.showMessageDialog(null, "Update failed: No rows affected.");
        }
    }catch (Exception ex) {
          JOptionPane.showMessageDialog(null, "Update failed: "+ ex.toString());
    }    
    }//GEN-LAST:event_jButton14ActionPerformed

    
    
    
  // { Delete Invoice }    
    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
       
        try {
           
                DriverManager.registerDriver(new org.postgresql.Driver());
                String conninfo="jdbc:postgresql://localhost:5432/postgres";
                Connection con=DriverManager.getConnection(conninfo,"allii","12345");
                con.setAutoCommit(false);
           
     
      
                Statement stmt = con.createStatement(); 
                String Check_id_is_exsit = jTextField12.getText();  
                
                String exist = "SELECT * FROM hwa.invoices  where  i_id='"+Check_id_is_exsit+"'";
                ResultSet rs = stmt.executeQuery(exist);
               
                if(rs.next()){
                    
                String sql="delete from hwa.invoices where i_id="+this.jTextField12.getText()+"";
                Statement st=con.createStatement();
                st.executeUpdate(sql);
         
                 
                jTextField11.setText(null);
                JOptionPane.showMessageDialog(null,"Deleted Successfully!"); 
                }
                 else{
                JOptionPane.showMessageDialog(null, "ID is Not Exist!");         
                jTextField11.setText(null);
              }
  
                con.commit();
                con.close();
            
         } catch (Exception ex) {
             JOptionPane.showMessageDialog(null, ex.toString());
        }
        
    }//GEN-LAST:event_jButton16ActionPerformed

    
 //-------{ Update Invoice }--------------------------------------------     
    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
       
    int selectedRow = jTable88.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(null, "Please select a row to update.");
        return;
    }

    Connection con = null;
    PreparedStatement pstmt = null;

    try {

        DriverManager.registerDriver(new org.postgresql.Driver());
        String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        con = DriverManager.getConnection(conninfo, "allii", "12345");
        con.setAutoCommit(false);


        int invoiceId = (Integer) jTable88.getValueAt(selectedRow, 0);
        double amount = Double.parseDouble(jTable88.getValueAt(selectedRow, 1).toString()); // assuming amount is a numeric value
        String paymentStatus = (String) jTable88.getValueAt(selectedRow, 2);
        int patientId = (Integer) jTable88.getValueAt(selectedRow, 3);


        String sql = "UPDATE hwa.invoices SET amount = ?, payment_status = ?, p_id = ? WHERE i_id = ?";
        pstmt = con.prepareStatement(sql);
        

        pstmt.setDouble(1, amount);
        pstmt.setString(2, paymentStatus);
        pstmt.setInt(3, patientId);
        pstmt.setInt(4, invoiceId);

        // Execute the update
        int affectedRows = pstmt.executeUpdate();
        con.commit();

        if (affectedRows > 0) {
            JOptionPane.showMessageDialog(null, "Update successful");
        } else {
            JOptionPane.showMessageDialog(null, "Update failed: No rows affected.");
        }
    }catch (Exception ex) {
          JOptionPane.showMessageDialog(null, "Update failed: "+ ex.toString());
    } 
        
    }//GEN-LAST:event_jButton17ActionPerformed

    

    
//_______________________________// Show All Info. " Invoices "________________________________   
    
    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
     
    
    DefaultTableModel model = (DefaultTableModel) jTable9.getModel();
    
    // Clear the current contents of the table
    model.setRowCount(0);

    Connection con = null;
    Statement stmt = null;
    ResultSet rs = null;
    try {
        // Register the PostgreSQL JDBC driver
        DriverManager.registerDriver(new org.postgresql.Driver());
        String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        
        // Establish the database connection
        con = DriverManager.getConnection(conninfo, "allii", "12345");
        
        // Create a SQL statement to retrieve invoice data
        String sql = "SELECT * FROM hwa.invoices";
        stmt = con.createStatement();
        rs = stmt.executeQuery(sql);
        
        // Loop through the result set and add each invoice to the JTable
        while (rs.next()) {
            int i_id = rs.getInt("i_id");
            BigDecimal amount = rs.getBigDecimal("amount");
            String payment_status = rs.getString("payment_status");
            int p_id = rs.getInt("p_id");

            // Add the invoice data as a new row in the table model
            model.addRow(new Object[]{i_id, amount, payment_status, p_id});
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error retrieving invoice data: " + ex.getMessage());
    } finally {
        // Ensure resources are closed to avoid resource leaks
        try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }


    }//GEN-LAST:event_jButton20ActionPerformed


//_______________________________// Show All Info. " Doctors "________________________________     
    
    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        
     DefaultTableModel model = (DefaultTableModel) jTableDoctors.getModel();

     model.setRowCount(0);

     Connection con = null;
     Statement stmt = null;
     ResultSet rs = null;
    try {
         DriverManager.registerDriver(new org.postgresql.Driver());
         String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        
         con = DriverManager.getConnection(conninfo, "allii", "12345");
        
         
         //The query execution is performed using a Statement object, and the results are stored in a ResultSet (rs).
         String sql = "SELECT * FROM hwa.doctors";
         stmt = con.createStatement();
         rs = stmt.executeQuery(sql);
          
         
         while (rs.next()) {
            int d_id = rs.getInt("d_id");
            String f_n = rs.getString("first_name");
            String l_n = rs.getString("last_name");
            String specialist = rs.getString("specialist");
            String mobile = rs.getString("mobile");
            String email = rs.getString("email");
            String password = "***";                             //String password = rs.getString("password"); 
            String address = rs.getString("address");

            model.addRow(new Object[]{d_id, f_n, l_n, specialist, mobile, email, password, address});
        }
        
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
    } finally {
         try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
        
    }//GEN-LAST:event_jButton21ActionPerformed

//_______________________________[ Show All Info. " Nurses ]"________________________________ 
    
    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
         
        DefaultTableModel model = (DefaultTableModel) jTableNurses.getModel();
     model.setRowCount(0);

    Connection con = null;
    Statement stmt = null;
    ResultSet rs = null;
    try {
         DriverManager.registerDriver(new org.postgresql.Driver());
         String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        
         con = DriverManager.getConnection(conninfo, "allii", "12345");
        
          String sql = "SELECT * FROM hwa.nurses";
          stmt = con.createStatement();
          rs = stmt.executeQuery(sql);
        
         while (rs.next()) {
            int n_id = rs.getInt("n_id");
            String name = rs.getString("name");
            String nursedutyhour = rs.getString("nursedutyhour");
            String email = rs.getString("email");
            String mobile = rs.getString("mobile");
            String password = rs.getString("password");

             model.addRow(new Object[]{n_id, name, nursedutyhour, email, mobile, password});
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
    } finally {
         try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
        
    }//GEN-LAST:event_jButton22ActionPerformed

//_______________________________[ Show All Info. " Patients ]"________________________________ 
    
    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
  
         
         DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
         model.setRowCount(0);

         Connection con = null;
         Statement stmt = null;
         ResultSet rs = null;
    try {
         DriverManager.registerDriver(new org.postgresql.Driver());
         String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        
         con = DriverManager.getConnection(conninfo, "allii", "12345");
        
         String sql = "SELECT * FROM hwa.patients";
         stmt = con.createStatement();
         rs = stmt.executeQuery(sql);
         
        while (rs.next()) {
            int p_id = rs.getInt("p_id");
            String F_N = rs.getString("first_name"); 
            String L_N = rs.getString("last_name"); 
            String d_of_b = rs.getString("dateofbirth");  
            String gender = rs.getString("gender");
            String address = rs.getString("address");
            String phone = rs.getString("phone");
            String email = rs.getString("email");
            int history_id = rs.getInt("history_id");              
            String blood_group = rs.getString("blood_group");

    model.addRow(new Object[]{p_id, F_N, L_N, d_of_b, gender, address, phone, email, history_id, blood_group});
}
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
    } finally {
         try {
            if (rs != null) rs.close();
            if (stmt != null) stmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    } 
    }//GEN-LAST:event_jButton23ActionPerformed

    
//_______________________________{ Search by ID | First_Name " Patients " }________________________________
    
    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed

        
        String text = jTextField3.getText();
        if (text == null || text.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Invalid input format !");
        }
     
        else{
        
         String searchText = jTextField3.getText().trim();
         DefaultTableModel model = (DefaultTableModel) jTable6.getModel();
         model.setRowCount(0);

         Connection con = null;
         PreparedStatement pstmt = null;
         ResultSet rs = null;

    try {
        DriverManager.registerDriver(new org.postgresql.Driver());
        String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        con = DriverManager.getConnection(conninfo, "allii", "12345");

        String sql;
        boolean isNumeric = searchText.matches("\\d+"); // Check if the searchText is numeric

        if (isNumeric) {
            sql = "SELECT * FROM hwa.patients WHERE p_id = ?";
            pstmt = con.prepareStatement(sql);
            pstmt.setInt(1, Integer.parseInt(searchText));
        } else {
            sql = "SELECT * FROM hwa.patients WHERE first_name ILIKE ?";
            pstmt = con.prepareStatement(sql);
            pstmt.setString(1, "%" + searchText + "%");
        }

        rs = pstmt.executeQuery();

        boolean found = false;
        while (rs.next()) {
            found = true;
            int p_id = rs.getInt("p_id");
            String f_n = rs.getString("first_name");
            String l_n = rs.getString("last_name");
            Date d_of_b = rs.getDate("dateofbirth");
            String gender = rs.getString("gender");
            String address = rs.getString("address");
            String phone = rs.getString("phone");
            String email = rs.getString("email");
            int history_id = rs.getInt("history_id");
            String blood_group = rs.getString("blood_group");

            model.addRow(new Object[]{p_id, f_n, l_n, d_of_b, gender, address, phone, email, history_id, blood_group});
        }

        if (!found) {
            JOptionPane.showMessageDialog(null, "No records found for the search criteria: " + searchText);
             jTextField3.setText(null);
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error closing resources: " + ex.getMessage());
        }
    }      
        }
    }//GEN-LAST:event_jButton9ActionPerformed

//_______________________________[ Show All Info. " Appointments ]"________________________________ 
    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed

        
         DefaultTableModel model = (DefaultTableModel) jTableAppointments.getModel();
         model.setRowCount(0);

         Connection con = null;
         PreparedStatement pstmt = null;
         ResultSet rs = null;
    try {
         DriverManager.registerDriver(new org.postgresql.Driver());
        String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        
         con = DriverManager.getConnection(conninfo, "allii", "12345");
        
          String sql = "SELECT * FROM hwa.appointments";
          pstmt = con.prepareStatement(sql);
          rs = pstmt.executeQuery();
        
         while (rs.next()) {
            int a_id = rs.getInt("a_id");
            Date date = rs.getDate("date");
            Time time = rs.getTime("time");
            String description = rs.getString("description");
            int d_id = rs.getInt("d_id");
            int p_id = rs.getInt("p_id");

             model.addRow(new Object[]{a_id, date, time, description, d_id, p_id});
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
    } finally {
         try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    }//GEN-LAST:event_jButton24ActionPerformed

 //_______________________________[ Show All Info. " Medication ]"________________________________  
    
    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
         
          DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
          model.setRowCount(0);

          Connection con = null;
          PreparedStatement pstmt = null;
          ResultSet rs = null;
    try {
          DriverManager.registerDriver(new org.postgresql.Driver());
          String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        
          con = DriverManager.getConnection(conninfo, "allii", "12345");
        
          String sql = "SELECT * FROM hwa.medications";
          pstmt = con.prepareStatement(sql);
          rs = pstmt.executeQuery();
        
         while (rs.next()) {
            int m_id = rs.getInt("m_id");
            String name = rs.getString("name");
            String dosage = rs.getString("dosage");
            Date expirydate = rs.getDate("expirydate");

             model.addRow(new Object[]{m_id, name, dosage, expirydate});
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
    } finally {
         try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
        
    }//GEN-LAST:event_jButton25ActionPerformed

    
//_______________________________{ Search by ID | Name " Nursess " }________________________________  
 
    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed


    String text = jTextField2.getText();
        if (text == null || text.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Invalid input format !");
        }
     
        else{
        
    String searchText = jTextField2.getText().trim();
    DefaultTableModel model = (DefaultTableModel) jTable5.getModel();
    model.setRowCount(0);

    Connection con = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;

    try {
        DriverManager.registerDriver(new org.postgresql.Driver());
        String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        con = DriverManager.getConnection(conninfo, "allii", "12345");

        String sql;
        boolean isNumeric = searchText.matches("\\d+");

        if (isNumeric) {
            sql = "SELECT * FROM hwa.nurses WHERE n_id = ?";
            pstmt = con.prepareStatement(sql);
            pstmt.setInt(1, Integer.parseInt(searchText));
        } else {
            sql = "SELECT * FROM hwa.nurses WHERE name ILIKE ?";
            pstmt = con.prepareStatement(sql);
            pstmt.setString(1, "%" + searchText + "%");
        }

        rs = pstmt.executeQuery();

        if (!rs.isBeforeFirst() && isNumeric) {
            JOptionPane.showMessageDialog(null, "No records found with ID: " + searchText);
             jTextField2.setText(null);
        } else {
            while (rs.next()) {
                int n_id = rs.getInt("n_id");
                String name = rs.getString("name");
                String nursedutyhour = rs.getString("nursedutyhour");
                String email = rs.getString("email");
                String mobile = rs.getString("mobile");
                String password = rs.getString("password"); 

                model.addRow(new Object[]{n_id, name, nursedutyhour, email, mobile, password});
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error closing resources: " + ex.getMessage());
        }
    }    
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    
//_______________________________{ Search by ID | F_N " Doctors " }________________________________  
   
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    
    String txt = jTextField1.getText();

    if (txt == null || txt.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Invalid input format !");
    } else { 
        
  

    // Search in information Doctor

    // Get the search text from jTextField1
    String searchText = jTextField1.getText().trim();
    
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    // Clear the existing data
    model.setRowCount(0);

    Connection con = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;
    
    try {
        // Register the PostgreSQL JDBC driver
        DriverManager.registerDriver(new org.postgresql.Driver());
        String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        con = DriverManager.getConnection(conninfo, "allii", "12345");
       
        String sql;
        boolean isNumeric = searchText.matches("\\d+"); // Check if the searchText is numeric
        
        if (isNumeric) { // If the searchText is numeric, search by ID
            sql = "SELECT * FROM hwa.doctors WHERE d_id = ?";
            pstmt = con.prepareStatement(sql);
            pstmt.setInt(1, Integer.parseInt(searchText));
        } else { // Otherwise, search by First_name
            sql = "SELECT * FROM hwa.doctors WHERE first_name ILIKE ?";
            pstmt = con.prepareStatement(sql);
            pstmt.setString(1, "%" + searchText + "%");
        }
        
        rs = pstmt.executeQuery();
        
        // Check if the ResultSet is empty and if the search was by ID
        if (!rs.isBeforeFirst() && isNumeric) {
            JOptionPane.showMessageDialog(null, "No records found with ID: " + searchText);
            jTextField1.setText(null);
        } else
        
        // Iterate through the result set and add rows to the table model
        while (rs.next()) {
            int d_id = rs.getInt("d_id");
            String ff_n = rs.getString("first_name");
            String ll_n = rs.getString("last_name");
            String specialist = rs.getString("specialist");
            String mobile = rs.getString("mobile");
            String email = rs.getString("email");
            String password = rs.getString("password");
            String address = rs.getString("address");
            
            // Add row to the model
            model.addRow(new Object[]{d_id, ff_n, ll_n, specialist, mobile, email, password, address});
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    }   
    }//GEN-LAST:event_jButton1ActionPerformed

 //_______________________________{ Search by App_ID | Doc_ID " Appointments " }______//__________________________    
    
    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

            String text = jTextField4.getText();
        if (text == null || text.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Invalid input format !");
        }
     
        else{

        
            String searchText = jTextField4.getText().trim();
            DefaultTableModel model = (DefaultTableModel) jTable7.getModel();
            model.setRowCount(0);

            Connection con = null;
            PreparedStatement pstmt = null;
            ResultSet rs = null;

    try {
        DriverManager.registerDriver(new org.postgresql.Driver());
        String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        con = DriverManager.getConnection(conninfo, "allii", "12345");

        String sql = "";
        if (searchText.matches("\\d+")) {  
            sql = "SELECT * FROM hwa.appointments WHERE a_id = ? OR d_id = ?";
            pstmt = con.prepareStatement(sql);
            int id = Integer.parseInt(searchText);
            pstmt.setInt(1, id);
            pstmt.setInt(2, id);
        }  

        rs = pstmt.executeQuery();

        if (!rs.isBeforeFirst()) { // no results found
            JOptionPane.showMessageDialog(null, "No records found for the search criteria: " + searchText);
            jTextField4.setText(null);
        } else {
            while (rs.next()) {
                int a_id = rs.getInt("a_id");
                Date date = rs.getDate("date");
                Time time = rs.getTime("time");
                String description = rs.getString("description");
                int d_id = rs.getInt("d_id");
                int p_id = rs.getInt("p_id");

                model.addRow(new Object[]{a_id, date, time, description, d_id, p_id});
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error closing resources: " + ex.getMessage());
        }
    }
        }
    }//GEN-LAST:event_jButton11ActionPerformed
   
  //_______________________________{ Search by Invoice_ID " }________________________________    
   
    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
         
        
        String text = jTextField6.getText();
        if (text == null || text.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Invalid input format !");
        }
     
        else{
        
          String searchText = jTextField6.getText().trim();
          DefaultTableModel model = (DefaultTableModel) jTable88.getModel();
          model.setRowCount(0);

          Connection con = null;
          PreparedStatement pstmt = null;
          ResultSet rs = null;

    try {
          DriverManager.registerDriver(new org.postgresql.Driver());
          String conninfo = "jdbc:postgresql://localhost:5432/postgres";
          con = DriverManager.getConnection(conninfo, "allii", "12345");

          String sql = "SELECT * FROM hwa.invoices WHERE i_id = ?";
          pstmt = con.prepareStatement(sql);
        
          int id = 0;
          try {
              id = Integer.parseInt(searchText);
          } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid ID format: " + searchText);
            return;  
        }
        
          pstmt.setInt(1, id);
          rs = pstmt.executeQuery();

        if (!rs.isBeforeFirst()) { // No results found
            JOptionPane.showMessageDialog(null, "No records found with ID: " + searchText);
            jTextField6.setText(null);
        } else {
            while (rs.next()) {
                 int i_id = rs.getInt("i_id");
                 BigDecimal amount = rs.getBigDecimal("amount");
                 String payment_status = rs.getString("payment_status");
                 int p_id = rs.getInt("p_id");

                model.addRow(new Object[]{i_id, amount, payment_status, p_id});
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error closing resources: " + ex.getMessage());
        }
    }}
    }//GEN-LAST:event_jButton18ActionPerformed

//_______________________________{ Search by Med_ID | Name_Med. " }________________________________    
    
    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        
        
        String text = jTextField5.getText();
        if (text == null || text.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Invalid input format !");
        }
     
        else{
        
         String searchText = jTextField5.getText().trim();
         DefaultTableModel model = (DefaultTableModel) jTable33.getModel();
         model.setRowCount(0);

         Connection con = null;
         PreparedStatement pstmt = null;
         ResultSet rs = null;

    try {
        DriverManager.registerDriver(new org.postgresql.Driver());
        String conninfo = "jdbc:postgresql://localhost:5432/postgres";
        con = DriverManager.getConnection(conninfo, "allii", "12345");

        String sql;
        boolean isNumeric = searchText.matches("\\d+"); // Check if the searchText is numeric

        if (isNumeric) {
            sql = "SELECT * FROM hwa.medications WHERE m_id = ?";
            pstmt = con.prepareStatement(sql);
            pstmt.setInt(1, Integer.parseInt(searchText));
        } else {
            sql = "SELECT * FROM hwa.medications WHERE name ILIKE ?";
            pstmt = con.prepareStatement(sql);
            pstmt.setString(1, "%" + searchText + "%");
        }

        rs = pstmt.executeQuery();

        if (!rs.isBeforeFirst()) { // no results found
            JOptionPane.showMessageDialog(null, "No records found for the search criteria: " + searchText);
            jTextField5.setText(null);
        } else {
            while (rs.next()) {
                int m_id = rs.getInt("m_id");
                String name = rs.getString("name");
                String dosage = rs.getString("dosage");
                Date expirydate = rs.getDate("expirydate");

                model.addRow(new Object[]{m_id, name, dosage, expirydate});
            }
        }
    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null, "Error: " + ex.getMessage());
    } finally {
        try {
            if (rs != null) rs.close();
            if (pstmt != null) pstmt.close();
            if (con != null) con.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Error closing resources: " + ex.getMessage());
        }
    }}
    }//GEN-LAST:event_jButton15ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField11ActionPerformed

    
    
    // { Clean JTable }
    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
         
     jTextField1.setText(null); 

     DefaultTableModel model = (DefaultTableModel) jTable1.getModel(); // Get the current table model

     for (int i = 0; i < model.getRowCount(); i++) {                  // Iterate over all rows and columns, setting each cell to null or an empty string
        for (int j = 0; j < model.getColumnCount(); j++) {
            model.setValueAt(null, i, j);           // Or model.setValueAt("", i, j); for an empty string
        }
    }
      
    }//GEN-LAST:event_jButton26ActionPerformed
   
    
    //{ Clean JTable }
    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        
     jTextField2.setText(null); 

     DefaultTableModel model = (DefaultTableModel) jTable5.getModel();  

     for (int i = 0; i < model.getRowCount(); i++) {                  
        for (int j = 0; j < model.getColumnCount(); j++) {
            model.setValueAt(null, i, j);           
        }
    }    }//GEN-LAST:event_jButton27ActionPerformed
    

    
    
    //{ Clean JTable }
    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
        
     jTextField3.setText(null); 

     DefaultTableModel model = (DefaultTableModel) jTable6.getModel();  

     for (int i = 0; i < model.getRowCount(); i++) {                  
        for (int j = 0; j < model.getColumnCount(); j++) {
            model.setValueAt(null, i, j);           
        }
    }
    }//GEN-LAST:event_jButton28ActionPerformed



    //{ Clean JTable }
    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
         
     jTextField4.setText(null); 

     DefaultTableModel model = (DefaultTableModel) jTable7.getModel();  

     for (int i = 0; i < model.getRowCount(); i++) {                  
        for (int j = 0; j < model.getColumnCount(); j++) {
            model.setValueAt(null, i, j);           
        }
    }
                
    }//GEN-LAST:event_jButton29ActionPerformed
   


    //{ Clean JTable }
    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
     
        
     jTextField5.setText(null); 

     DefaultTableModel model = (DefaultTableModel) jTable33.getModel();  

     for (int i = 0; i < model.getRowCount(); i++) {                  
        for (int j = 0; j < model.getColumnCount(); j++) {
            model.setValueAt(null, i, j);           
        }
    }
    }//GEN-LAST:event_jButton30ActionPerformed

    
     //{ Clean JTable }
    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        
     jTextField6.setText(null); 

     DefaultTableModel model = (DefaultTableModel) jTable88.getModel();  

     for (int i = 0; i < model.getRowCount(); i++) {                  
        for (int j = 0; j < model.getColumnCount(); j++) {
            model.setValueAt(null, i, j);           
        }
    }
        
    }//GEN-LAST:event_jButton31ActionPerformed

    
    




    
    
    
    
    
    
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NewJFrame_Show_All.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NewJFrame_Show_All.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NewJFrame_Show_All.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NewJFrame_Show_All.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame_Show_All().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable33;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTable jTable6;
    private javax.swing.JTable jTable7;
    private javax.swing.JTable jTable88;
    private javax.swing.JTable jTable9;
    private javax.swing.JTable jTableAppointments;
    private javax.swing.JTable jTableDoctors;
    private javax.swing.JTable jTableNurses;
    private javax.swing.JTabbedPane jTablePatients;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
